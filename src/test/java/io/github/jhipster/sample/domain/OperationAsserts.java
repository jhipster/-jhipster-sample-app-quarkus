package io.github.jhipster.sample.domain;

import static io.github.jhipster.sample.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class OperationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperationAllPropertiesEquals(Operation expected, Operation actual) {
        assertOperationAutoGeneratedPropertiesEquals(expected, actual);
        assertOperationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperationAllUpdatablePropertiesEquals(Operation expected, Operation actual) {
        assertOperationUpdatableFieldsEquals(expected, actual);
        assertOperationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperationAutoGeneratedPropertiesEquals(Operation expected, Operation actual) {
        assertThat(expected)
            .as("Verify Operation auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperationUpdatableFieldsEquals(Operation expected, Operation actual) {
        assertThat(expected)
            .as("Verify Operation relevant properties")
            .satisfies(e -> assertThat(e.date).as("check date").isEqualTo(actual.date))
            .satisfies(e -> assertThat(e.description).as("check description").isEqualTo(actual.description))
            .satisfies(e -> assertThat(e.amount).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.amount));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperationUpdatableRelationshipsEquals(Operation expected, Operation actual) {
        assertThat(expected)
            .as("Verify Operation relationships")
            .satisfies(e -> assertThat(e.bankAccount).as("check bankAccount").isEqualTo(actual.bankAccount))
            .satisfies(e -> assertThat(e.labels).as("check labels").isEqualTo(actual.labels));
    }
}
